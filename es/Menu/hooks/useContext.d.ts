import { Ref, VNode } from 'vue';
import { TooltipProps } from '../../Tooltip';
import { TriggerProps } from '../../Trigger';
import { MenuMode, PopupMaxHeight, MenuEmits } from '../type';
import { Props } from '../../_shared/type';
type MenuContext = {
    computedSelectedKeys: Ref<string>;
    computedOpenKeys: Ref<string[]>;
    computedCollapsed: Ref<boolean>;
    levelIndent: Ref<number>;
    accordion: Ref<boolean>;
    autoOpen: Ref<boolean>;
    autoOpenSelected: Ref<boolean>;
    mode: Ref<MenuMode>;
    theme: Ref<'light' | 'dark'>;
    autoScrollIntoView: Ref<boolean>;
    scrollConfig: Ref<ScrollIntoViewOptions>;
    popupMaxHeight: Ref<number | undefined>;
    triggerProps: Ref<TriggerProps>;
    tooltipProps: Ref<TooltipProps>;
    menuTreeNodes: Ref<MenuTreeNode[]>;
    menuTree: Ref<MenuTreeNode[]>;
    menuItemWidths: Ref<number[]>;
    max: Ref<number>;
    emits: MenuEmits;
};
export type MenuTreeNode = {
    id: string;
    type: 'submenu' | 'menuitem';
    path: string;
    parentId: string | null;
    level: number;
    label: () => any;
    children?: MenuTreeNode[];
};
export declare function FlattenMenuTree(vnodes: VNode[], componentName: string[]): MenuTreeNode[];
export declare function buildMenuTree(flatData: MenuTreeNode[]): MenuTreeNode[];
export declare function isMenuItemActive(menuTree: MenuTreeNode[], currentPath: string, activePath: string): boolean;
export declare const getPopupMaxHeight: (popupMaxHeight: PopupMaxHeight) => number | undefined;
declare const _default: () => {
    provide: (props: Props, emits: MenuEmits, menuRef: Ref<HTMLDivElement | undefined>) => {
        computedCollapsed: import('vue').WritableComputedRef<any, boolean>;
        breakpoint: Ref<import('../..').BreakpointName, import('../..').BreakpointName>;
        collapsedWidth: import('vue').ComputedRef<string>;
        menuTree: import('vue').ComputedRef<MenuTreeNode[]>;
        max: Ref<number, number>;
    };
    inject: () => MenuContext;
};
export default _default;
