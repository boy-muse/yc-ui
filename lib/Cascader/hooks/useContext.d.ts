import { Ref, Slots } from 'vue';
import { CascaderEmits, CascaderValue, CascaderOption, CascaderOptionValue, CascaderOptionProps, ExpandTrigger, LoadMore } from '../type';
import { InputInstance } from '../../Input';
import { Props } from '../../_shared/type';
type CascaderContext = {
    computedValue: Ref<CascaderValue>;
    computedInputValue: Ref<string>;
    totalOptions: Ref<CascaderOption[]>;
    options: Ref<CascaderOptionProps[]>;
    searchOptions: Ref<CascaderOptionProps[]>;
    curLevel: Ref<number>;
    maxLevel: Ref<number>;
    curPath: Ref<number[]>;
    pathMode: Ref<boolean>;
    multiple: Ref<boolean>;
    loading: Ref<boolean>;
    expandTrigger: Ref<ExpandTrigger>;
    expandChild: Ref<boolean>;
    slots: Slots;
    blur: () => void;
    getValueKey: (value: any) => string;
    loadMore?: LoadMore;
    getOption: (value: CascaderOptionValue | CascaderOptionValue[]) => CascaderOptionProps;
};
export declare const transformOptions: (options: CascaderOption[], level?: number, nodePath?: CascaderOption[]) => CascaderOptionProps[];
export declare const flattenOptions: (options: CascaderOptionProps[]) => CascaderOptionProps[];
export declare const findOptions: (options: CascaderOptionProps[], level: number, parentPath: number[]) => CascaderOptionProps[];
export declare function findOptionByValueAndLevel(options: CascaderOption[], value: CascaderOptionValue, level: number, currentLevel?: number): CascaderOption | undefined;
export declare const getLeafNodes: (nodes: CascaderOptionProps[]) => CascaderOptionProps[];
declare const _default: () => {
    provide: (props: Props, emits: CascaderEmits, inputRef: Ref<InputInstance | undefined>) => {
        computedValue: import('vue').WritableComputedRef<any, CascaderValue>;
        computedInputValue: import('vue').WritableComputedRef<any, string>;
        computedVisible: import('vue').WritableComputedRef<any, boolean>;
        options: import('vue').ComputedRef<CascaderOptionProps[]>;
        optionMap: import('vue').ComputedRef<any>;
        selectOptions: import('vue').ComputedRef<any>;
        curLevel: Ref<number, number>;
        curPath: Ref<number[], number[]>;
        multiple: Ref<boolean, boolean>;
        pathMode: Ref<boolean, boolean>;
        disabled: Ref<boolean, boolean>;
        allowClear: Ref<boolean, boolean>;
        allowSearch: Ref<boolean, boolean>;
        searchDelay: Ref<number, number>;
        loading: Ref<boolean, boolean>;
        getValue: (value: CascaderOptionValue) => unknown;
        getValueKey: (value: CascaderOptionValue | CascaderOptionValue[]) => string;
        getOption: (value: CascaderOptionValue | CascaderOptionValue[]) => CascaderOptionProps;
    };
    inject: () => CascaderContext;
};
export default _default;
