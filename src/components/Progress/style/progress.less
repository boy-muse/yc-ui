@component: yc-progress;
@{component} {
  position: relative;
  line-height: 1;
  font-size: 12px;
  // steps
  @{component}-steps-wrapper {
    width: 100%;
    max-width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    gap: 8px;
    @{component}-steps {
      width: 100%;
      display: flex;
      gap: 3px;
      @{component}-steps-item {
        position: relative;
        flex: 1;
        flex-shrink: 0;
        height: 100%;
      }
    }
  }
  // line
  @{component}-line-wrapper {
    height: 100%;
    width: 100%;
    max-width: 100%;
    display: flex;
    align-items: center;
    gap: 16px;
    @{component}-line {
      overflow: hidden;
      position: relative;
      width: 100%;
      border-radius: 100px;
      @{component}-line-bar {
        position: relative;
        height: 100%;
        border-radius: 100px;
        transition:
          width 0.6s cubic-bezier(0.34, 0.69, 0.1, 1),
          background 0.3s cubic-bezier(0.34, 0.69, 0.1, 1);
      }
    }
    @{component}-line-text {
      min-width: 32px;
    }
  }
  // circle
  @{component}-circle-wrapper {
    position: relative;
    text-align: center;
    line-height: 1;
    display: inline-block;
    vertical-align: text-bottom;
    @{component}-circle-svg {
      transform: rotate(-90deg);
      @{component}-circle-bar {
        transition:
          stroke-dashoffset 0.6s cubic-bezier(0, 0, 1, 1) 0s,
          stroke 0.6s cubic-bezier(0, 0, 1, 1);
      }
    }
    @{component}-circle-text {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: rgb(134, 144, 156);
    }
  }
  // 通用
  @{component}-steps-item {
    background-color: rgb(229, 230, 235);
  }
  @{component}-line {
    background-color: rgb(229, 230, 235);
  }
  @{component}-circle-bg {
    stroke: rgb(229, 230, 235);
  }
  @{component}-steps-text,
  @{component}-line-text,
  @{component}-circle-text {
    flex-shrink: 0;
    font-size: 12px;
    color: rgb(78, 89, 105);
    display: flex;
    align-items: center;
    gap: 4px;
  }
}
// type
@{component}-type-line,
@{component}-type-steps {
  display: inline-block;
  max-width: 100%;
  width: 100%;
}
// size
@size: {
  @small: {
    line-text-size: 12px;
    circle-text-size: 12px;
    icon-size: null;
  };
  @medium: {
    line-text-size: 12px;
    circle-text-size: 14px;
    icon-size: null;
  };
  @large: {
    line-text-size: 16px;
    circle-text-size: 16px;
    icon-size: 14px;
  };
};
each(@size, .(@size,@name){
  @key:replace(~"@{name}", "@", "");
  @{component}-size-@{key} {
    @{component}-line-text {
      font-size: @size[line-text-size];
    }
    
    @{component}-circle-text {
      font-size: @size[circle-text-size];
      
      & when not (@size[icon-size] = null) {
        .yc-icon {
          font-size: @size[icon-size];
        }
      }
    }
  }
});
// status
@status: {
  @normal: {
    color: rgb(22, 93, 255);
    mini-bg-color: rgb(148, 191, 255);
  };
  @success: {
    color: rgb(0, 180, 42);
    mini-bg-color: null;
  };
  @warning: {
    color: rgb(255, 125, 0);
    mini-bg-color: rgb(255, 207, 139);
  };
  @danger: {
    color: rgb(245, 63, 63);
    mini-bg-color: rgb(251, 172, 163);
  };
};
each(@status, {
  @status: @value;
  @{component}-status-@{key} {
    @{component}-steps-item-active,
    @{component}-line-bar {
      background-color: @status[color];
    }
    
    @{component}-circle-bar {
      stroke: @status[color];
    }
    
    & when not (@key = success) and not (@status[mini-bg-color] = null) {
      &@{component}-size-mini {
        @{component}-circle-bg {
          stroke: @status[mini-bg-color];
        }
      }
    }
  }
});
